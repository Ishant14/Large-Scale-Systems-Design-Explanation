
1-) What is system looks like?

  * This software is an application that users can comminicate between other users (whether they are friends or not). This means that users can send message or limited 
  files for other users. Notice that in a message sytem, one to one conservation or group conservation should be supported. As explained
  later, system should be reliable and send response with minimum latency. (also availabity). Additionally users should use this sytem in any
  platform. (desktop or mobile or etc..)
  
2-) Goals and Requirements

 * There are 3 types of requirements should define for developing this system.
 
   i-) Functional requirements
     - User should send messages or limited files to other users.
     - Users should see the all conservation tabs from their platform.
     - Users should see the old conservations (in old messages area)
     - Users should see who is online or who is offline in platform
  
   ii-) Non functional requirements
    - System should be highly available. This means that users should reach the system 
    whenever they want. We can prefer more servers for developing system. 
    - System should return requests with minimum latency. This means that when users send a message to other user, this message should
    reach as fast as possible. (This property can be provided with data partition and again with more servers)
    - System can be reliable. This means that data loosing is not a good thing. We can do the replication. Notice that for one shard
    the suitable replicate shard number is 2 or more. Additionally, system can be tolerance for consistency.
    
   iii-) Extended requirements
    - REST API can be used to developing this system.
    - Additionally we can use push notification services for seeing message when coming new message. Amazon SNS service
    or OneSignal can be preferred for notifications. (OneSignal free, AWS SNS not free) 
    - System can be monitorize.
    
  3-) Capacity estimation
  
    * In this systen, we suppose that 100 Million active users in one day, and each users end average 30 new messages in a day. This means 
    that (If we think that each message is 100 bytes)
    
    Storage estimate in one day : 100M * 30 new message *  100 bytes = 3 * 10^11 Byte = 300 GB 
    Storage estimate in 10 years : 300 GB * 365 * 10 = (approximately) 1 PB (huge data).
    Notice that this estimation is only for chat data. This does not include metadata(user information, chat data information) 
    and replications.
    
    * For bandwith estimation; 
    300 GB / (24 * 3600) = (approximately 5 MB) => (For both upload and download)
    
  4-) Think about high level design
  
   * A sends a message to B through the server.
   * The server receives the message and sends an acknowledgment to A.
   * The server stores the message in its database and sends the message to B.
   * B gets the message and sends the acknowledgment to the server.
   * The server notifies A that the message has been delivered successfully to User-B.
   
 5-) Database
 
  * If we think that, there will be huge data over the 10 years, so we should care minimum latency, we don't use Relational database or
  NoSql database like MongoGB. We can use HBase (Hadoop distributed file system big data) that provides us to read and write with minimum latency. 
  * Notice that clients fetch the data with pagination because desktop and mobile is a different window size. Additionally,
  when server get the request, it should store this data asencronious methods.
  
  6-) Detailed system component design
  
  * we should think that how clients receive or sent messages efficiently? There are two types of here. First one is pull type and second 
  one is push type. Pull type means that clients ask server new messages comes or not periodically. This leads to wasting a lot of source.
  Additionally, in this method, clients have to check server for minimum latency. This means that this is an inefficient solution.
  In push method; Users can keep a connection open with the server and can depend upon the server to notify them whenever there are new messages.
  (Http Long polling). Notice that if servers have a lot of opening connections, they decide which message belongs to which connection with
  Hashing. (userID and connection object)
  Additionally  Letâ€™s plan for 100 million connections at any time. 
  Assuming a modern server can handle 10K concurrent connections at the same time, we would need 10K such servers. Additionally,
  we will use software load balancer for determining user server relations. Finally;
  
  i-) Clients oepn connections
  ii-) Client send data to chat server
  iii-) All of the related other clients receive this messages with long polling
  iiii-) At the same time server store data in database (with seperate one thread or asyncronious method)
  
  7-) Data partition
  
  If we think that system will store much more huge data, we should distribute data with different servers. For this operation,
  there are two possible options, first hash with USERID second is hash with MESSAGEID. If we partition with hash based on MESSAGEID
  system may not be supported minimum latency. (fetching data from multiple server). So the efficient solution is Hash based on UserID.
  With hash based on UserID we focus on shard. If we think that each shard 4 TB size, then shard number equals to 250. 
  So server is (USERID % 250)
  
  8-) Cache
  
  Least recently used data for the user caches in one machine, because of same reasoning for data partition. (metadata caching and message db caching)
  
  9-) Load balancer
  
  * One for client and application servers
  * One for application servers and cache servers
  * One for application servers and message database servers
  
  10-) Replication
  
  * Replication should be applied for this system. Notice that for one server at least two or more copy of servers should be done.
  
  NOTE!! Fault tolerance and tolerance of consistency can be accepted. Additionally, if the always on server fails, then replication server
  will be used like a always on server.
  
  
  
  
  
    

1-) What this system looks like?

  i-) This system is used for uploading image and sharing this image to any other users. 
    This means that users can share images and other users who follow this user can see user's images.
  ii-) Notice that users have a timeline that all of their images list here.

2-) Requirements and goals

  i-) Users can upload images and others can see these images.
  ii-) Users can follow other users
  iii-) Users can delete their images.
  iiii-) Users have a timeline (Notice that 200 ms is ok for generation timeline)
  iiiii-) Users can accept or ignore the other user's follow-up request
  iiiiii-) System should be highly reliable. This means that any image should not be lost. (with replication)
  iiiiiii-) System should be highly available. This means that every user should reach the images whenever they want (with one more servers)
  iiiiiiii-) System should be work with minimum latency. (with partition, load balancer etc.)
  iiiiiiiii-) Rest API can be used for this application.
  iiiiiiiiii-) Notice that system can be monitored with some of added informations such as locations, access time, upload time etc.
  iiiiiiiiiii-) Users can search images with titles.
  
3-) Capacity Estimation
    a-)Storage
    
      1-) Notice that if system has 500 Million users and 1 Million users upload 2 images in one day.
        If we assume that average image size 200 KB then one day capacity = 2M * 200 KB = 400 GB for every day. 
        In 10 years => 400 GB * 365 * 10 ~= 1500 TB (huge data)
    
    b-) Cache
      
        1-) If we use %20 principle for caching mechanism. Then one day capacity * 0.2 is for cache memory => 400 GB * 0.2 = 80 GB
        
 

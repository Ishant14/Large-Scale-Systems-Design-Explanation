1-) What this system looks like?
  
  * This system provides us to share text with other users. This is typically social networking system. When users use this system, 
  they post character sets(maximum 150 character) and they are called as "tweets". Notice that in Twitter system, if you register this
  site, you can post and read tweets, on the other hand, if you are not register (or not login) you can only read tweets. Moreover, users
  reach this system any platform like desktop application or mobile application.

2-) Requirements and goals of Twitter

  * There are typically 3 types of requirements. First one is functional requirements, second one is nonfunctional requirements and 
  third one is extended requirements. During the development process, we should determine all three requirements clearly.
  * Users can register and login.
  * Users can logout.
  * When users login, they can share or read tweets.
  * When users are not register or login, they can only read tweets.
  * Users can follow other users.
  * Users can mark some tweets as a favourite.
  * System should be highly reliable. This means that no of post should be lost.
  * System should be highly available. This means that users should reach this system whenever they want.
  * System should return the requests with minimum latency. This means that users should reach the posts nearly real lime.
  * System can be monitorized. For this purpose, we can keep the location of users, or location of shared tweets.
  * During the development of system, REST or SOAP API's can be used. (REST API is a little bit good option)
  * Additionally, when users post tweets, these tweets can contain any file or photo.
  * Notice that, if we design a system like twitter, we can determine the acceptable latency like as a 300 ms.
  * Additionally, consistency can acceptable, if the system give the request properly later.
  * Users can search the tweets during the travel the site.
  * Finally, people can answer the tweets.
  
 3-) Capacity and Estimation
 
  * If we assume that daily, 100 Million new tweets come to this system, and notice that maximum tweet size is 150 character, 
  
  * Daily storage = 100 Million * (140 * 2 + 20) = 100 Million * 300 bytes = 30 GB per day. (20 Byte for medata of tweet)
  If we think about 10 years later, 30 GB * 30 * 12 * 10 = 30 GB * 3600 = 108 TB for text tweet. Additionaly if we assume that,
  If any photo = 100 KB and any video is 2 MB and ratio is (5:1:1);
  
  100 KB * 20 Million * 30 * 12 * 10 = 200 Million * 3600 KB = 2 GB * 360 = 720 TB for photos
  2 MB * 20 Million * 30 * 12 * 10 = 400 Million * 360 MB = approximately 4*10^12 byte * 36 = 144 * 10^12 byte for videos.
  
  * This is a huge data. We need to sharding.
  
  Additionaly we can calculate bandwith estimate. Notice that for banding, we should calculate the read and write tweet capacity in a second.
  Moreover, cahcing mechanism should be used to develop this sytem. If we think that the general approximation of caching mechanism is 
  %20 for daily storage, we can easily calculate the necessity memory for caching.
  
 4-) API's
 
 * To develop this site, we can use REST API's for mobile application and desktop application. (Notice that we can also use SOAP API's)
 * There are several main API's.
  - createTweet
  - deleteTweet
  - updateTweet
  - getTweet
  - searchTweet
  - markTweet
  - followUser
  - login
  - logout
  ...etc
  
  * Notice that, key parameter should be used almost every API's because of controlling registration and monitoring system. (We can obtain
  information about users with key). A succesfull create API will return URL demonstrated by string and failed API return HTTP_Response error.
  
  
  
  

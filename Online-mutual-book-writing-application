1-) What this application looks like
 
 - This application provides users to write novel or story or any other thing with other users registered the system. If users use this
  application, they can write novel or story with other users that they don't know each others.

2-) Why Online mutual book writing system

 - This application helps users to write book via online platform. Not only providing writing book via online platform, but it also provides
 us to improve communication with other people that we don't know. Additionally, you can read the other users story or novel if you follow them.
 
3-) Requirements and Goals of The System

 - Functional Requirements
  * Users should be registered for both reading and writing.
  * If users register the system, then they should have a personal page.
  * Users should read or write novel or story when they are registered the system.
  * Users should follow other users.
  * Users should write the their novel or story with other users if they want.
  * Users should accept other users like a friend to write the novel or story together.
  * Users should finialize their story and novel if they want. Notice that only user that opened the novel or story block should 
  finialize the novel or story.
  * If users want to throw the users from the novel or story writing process, they should do that.
  * Users should search the writer or novel that they want to look.
  * Users should see the popular novel or story via main pages.
  * Users can write the novel or story with different language options. (Turkish, English)
  * Users should divide the novel or part like a book. 
  * If users want to add picture, then they should be able add picture. 
  * Notice that each page should have the page number.
  * Notice that users should determine the font and types.
  * Each novel should have the content page by default. (If user does not want to add content to novel, they can delete it with "X" button.) 
  * Users can send the request to other users to write the novel or story together.
  * Users can reject the other request.
  * Application should pay the writers when other users open their stories or novels. 
  * When users register, users should directly redirect to paypall page to pay money.
  * If one user open the novel or story, other users writed the same novel or story should not reach. (Just shown the warning and explain
  the state)
  * Users should compare between the previous and current versions to catch and see the changes.
  
- NonFunction Requriments
 * The system should highly reliable, any story or novel should not be lost.
 * The system should be highly avaliable, Consistency can take a hit, but if a user does not see a stories or novels for a while, it should be fine.
 * System should present users to the real time experience.
 * Concurrency is more important. (last changing should be reflect as much as possible. (before the opening by other users))
 
 -Extended Requirements
 * System should be monitoring. For this operation amazon cloud watch can be used.
 
 4-) Capacity Estimation and Constraints
 * Let's assume 50 million total users and 5 million of whom are daily active users.
 * Let's assume that the ratio of reading and writing operation is 20 : 1
 * We assume that in every day 1 hour (5000 files * 100 KB). Let's assume that each novel is 1 MB and each each story is 50 KB.
 * Storage estimate = 1 day (5000 * 100KB * 24) = (approximately 1.2 GB) (Just only the novels or stories)
 * If we want to calculate the 10 years later, this calculation is so huge. (we should use sharding)
 * Bandwith is calculated based on the day storage. (Read and write operation both of.)
 
 5-) System API's
 * Both SOAP and REST APIs can be used but REST API was chosen for this application.
 * We should have an api key to providing registered account. 
 * Also we should use the HTTP response.
 * (System API's will be determined with much more details later)
 
 6-) High Level System Design
 * we have clients
 * we have a proxy server.
 * we have a load balancer to determine the application server based on the request.
 * we have a one more application servers (Amazon EC2)
 * we have a file storage (Amazon S3)
 * we have a load balancer to determine the caching server (Amazon elasticache)
 * We have a Database servers. (With DBShard sharding)
   => We have two database servers first one MySql(RDBMS), second one is MongoDB (NoSQL)
 * For providing system reliablity, we should have one two more database servers to replication. (In the beginging, one replica server is enough)
 
 7-) Database Schema
 * we will determine the much more details of database schema. We can use Nosql and MySql. (For providing Transcation)
 
 8-) Data Sharding
 * We shard the fileId and fileCreationTime.
 
 9-) Cache
 * LRU operation will be used for caching operation.
 * Amazon ElasticCache will be used for cahcing operation.
 * (80 - 20 rule will be used.)
 * Each shard caching mechanism.
 
 10-) Load balancer
 * Between client and application server
 * between application server and database replication servers
 * between application server and cache server.
 * We can implement intelligent load balancer solution (may be improving round robin).
 
 11-) Monitoring
 * For understanding the performance of our service:
  - average latency should be calculated.
  - how many byte writing the database should be watched.
  
 12-) Data Replication
 * For each database shard, we should keep the replicas. (2+)
 
 Notice that; this is the beginning of the determining the system properties. This file should be extended with much more details.
 
 13-) Technologies for developing this project
 
  - Java (Coding language).
  - Spring and MVC(Framework for Java web application)
  - Hibernate(ORM and Database application)
  - AOP (Logging, Authorized and Transaction operations )
  - Proxy Server
  - Web Servers
  - Application Servers
  - Load balancer
  - Router
  - MySQL(For RDBMS)
  - MongoDB(For NoSQL)
  - Replication
  - Sharding
  - Amazon ElastiCache (For caching mechanism)
  - Amazon Cloud Watch (For monitoring the system)
  - Amazon EC2
  - Amazon S3
  - Amazon SQS (For Queueing the request)
  - Testing (Unit and Integration)
 
